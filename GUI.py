# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Interface2.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
import pyqtgraph as pg
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QPushButton, QHBoxLayout, QMessageBox, QSizePolicy
from PyQt5.QtGui import QFont, QColor
import random

class PyqtGraphWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.plot_widget = pg.PlotWidget()
        # self.plot_widget.setBackground("b")              # Set the background as black
        self.plot_widget.setTitle("AC Voltage against Time", size="10pt")        # Set Title
        self.plot_widget.setLabel("left", "Voltage Values (V)", color="white")
        self.plot_widget.setLabel("bottom", "Time (s)", color="white")
        self.plot_widget.showGrid(x=True, y=True)
        layout = QHBoxLayout()                          # Ensure it is in horizontal plane
        layout.addWidget(self.plot_widget)
        self.setLayout(layout)

    def plot(self, x, y):
        self.line = self.plot_widget.plot(x, y, symbol="+")

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        super().__init__()

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 900)                         # The Display is 800 pixels wide and 480 tall
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        ## Initial Parameters
        self.current_frequency = 50
        self.select_frequency = 50
        self.minimum_frequency = 10
        self.max_frequency = 100
        self.resistance_value = 0
        self.bandwidth = 100

        # Create main layout
        main_layout = QVBoxLayout()
        top_layout = QHBoxLayout()
        middle_layout = QHBoxLayout()
        bottom_layout = QHBoxLayout()

        ### Top Layout ###
        # Title
        self.title = QtWidgets.QLabel(MainWindow)
        self.title.setText("Electronic Load Controller     ")
        self.title.move(200, 200)
        title_font = QFont()
        title_font.setPointSize(30)
        self.title.setFont(title_font)

        credits_font = QFont()
        credits_font.setPointSize(15)

        self.program_status = QPushButton("      STABLE      ")
        self.program_status.setStyleSheet("background-color: #86FF33")
        self.program_status.setFont(credits_font)

        self.credits = QtWidgets.QLabel(MainWindow)
        self.credits.setText("            "+" Final Year Project by Cayden, Bryan & Richard")
        self.credits.move(500, 250)
        self.credits.setFont(credits_font)
        self.credits.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)

        top_layout.addWidget(self.title)
        top_layout.addWidget(self.program_status)
        top_layout.addWidget(self.credits)

        ### Middle Layout ###
        # Create resistor label widgets
        resistor_button_widget = QWidget()
        resistor_button_layout = QVBoxLayout()

        # Have boolean logic (1 means resistor is activated, 0 means resistor is not in use)
        self.r1_activate = 0
        self.r2_activate = 0
        self.r3_activate = 0
        self.r4_activate = 1
        self.r5_activate = 0
        self.r6_activate = 1
        self.r7_activate = 0
        self.r8_activate = 1

        # Resistor Values (TODO : TO be confirmed)
        self.r1_value = 1000
        self.r2_value = 2000
        self.r3_value = 3000
        self.r4_value = 4000
        self.r5_value = 5000
        self.r6_value = 6000
        self.r7_value = 7000
        self.r8_value = 8000

        # Add text to the labels
        self.resistor_on = "ON"
        self.resistor_off = "OFF"
        
        r1_text_layout = QHBoxLayout()
        self.r1_text = QtWidgets.QLabel(MainWindow)
        self.r1_text.setText("R1 (" + str(self.r1_value) + " Ohm) : ")           # Initially (for first interval) the GUI will show that all reistsors are off
        # self.r1_text.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.r1_status_button = QPushButton(self.resistor_off)
        # self.r1_status_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        # self.r1_status_button.resize(1, 1)
        r1_text_layout.addWidget(self.r1_text)
        r1_text_layout.addWidget(self.r1_status_button)

        r2_text_layout = QHBoxLayout()
        self.r2_text = QtWidgets.QLabel(MainWindow)
        self.r2_text.setText("R2 (" + str(self.r2_value) + " Ohm) : ")
        self.r2_status_button = QPushButton(self.resistor_off)
        r2_text_layout.addWidget(self.r2_text)
        r2_text_layout.addWidget(self.r2_status_button)

        r3_text_layout = QHBoxLayout()
        self.r3_text = QtWidgets.QLabel(MainWindow)
        self.r3_text.setText("R3 (" + str(self.r3_value) + " Ohm) : ")
        self.r3_status_button = QPushButton(self.resistor_off)
        r3_text_layout.addWidget(self.r3_text)
        r3_text_layout.addWidget(self.r3_status_button)

        r4_text_layout = QHBoxLayout()
        self.r4_text = QtWidgets.QLabel(MainWindow)
        self.r4_text.setText("R4 (" + str(self.r4_value) + " Ohm) : ")
        self.r4_status_button = QPushButton(self.resistor_off)
        r4_text_layout.addWidget(self.r4_text)
        r4_text_layout.addWidget(self.r4_status_button)

        r5_text_layout = QHBoxLayout()
        self.r5_text = QtWidgets.QLabel(MainWindow)
        self.r5_text.setText("R5 (" + str(self.r5_value) + " Ohm) : ")
        self.r5_status_button = QPushButton(self.resistor_off)
        r5_text_layout.addWidget(self.r5_text)
        r5_text_layout.addWidget(self.r5_status_button)

        r6_text_layout = QHBoxLayout()
        self.r6_text = QtWidgets.QLabel(MainWindow)
        self.r6_text.setText("R6 (" + str(self.r6_value) + " Ohm) : ")
        self.r6_status_button = QPushButton(self.resistor_off)
        r6_text_layout.addWidget(self.r6_text)
        r6_text_layout.addWidget(self.r6_status_button)

        r7_text_layout = QHBoxLayout()
        self.r7_text = QtWidgets.QLabel(MainWindow)
        self.r7_text.setText("R7 (" + str(self.r7_value) + " Ohm) : " )
        self.r7_status_button = QPushButton(self.resistor_off)
        r7_text_layout.addWidget(self.r7_text)
        r7_text_layout.addWidget(self.r7_status_button)

        r8_text_layout = QHBoxLayout()
        self.r8_text = QtWidgets.QLabel(MainWindow)
        self.r8_text.setText("R8 (" + str(self.r8_value) + " Ohm) : " )
        self.r8_status_button = QPushButton(self.resistor_off)
        r8_text_layout.addWidget(self.r8_text)
        r8_text_layout.addWidget(self.r8_status_button)

        # Adding the Font sizes to the labels
        resistor_font = QFont()
        resistor_font.setPointSize(15)
        self.r1_text.setFont(resistor_font)
        self.r1_status_button.setFont(resistor_font)
        self.r2_text.setFont(resistor_font)
        self.r2_status_button.setFont(resistor_font)
        self.r3_text.setFont(resistor_font)
        self.r3_status_button.setFont(resistor_font)
        self.r4_text.setFont(resistor_font)
        self.r4_status_button.setFont(resistor_font)
        self.r5_text.setFont(resistor_font)
        self.r5_status_button.setFont(resistor_font)
        self.r6_text.setFont(resistor_font)
        self.r6_status_button.setFont(resistor_font)
        self.r7_text.setFont(resistor_font)
        self.r7_status_button.setFont(resistor_font)
        self.r8_text.setFont(resistor_font)
        self.r8_status_button.setFont(resistor_font)

        # Add the widgets to the layout 
        resistor_button_layout.addLayout(r1_text_layout)
        resistor_button_layout.addLayout(r2_text_layout)
        resistor_button_layout.addLayout(r3_text_layout)
        resistor_button_layout.addLayout(r4_text_layout)
        resistor_button_layout.addLayout(r5_text_layout)
        resistor_button_layout.addLayout(r6_text_layout)
        resistor_button_layout.addLayout(r7_text_layout)
        resistor_button_layout.addLayout(r8_text_layout)
        resistor_button_widget.setLayout(resistor_button_layout)

        # Plot the graph
        self.plot_widget = PyqtGraphWidget()
        self.time = list(range(self.bandwidth))
        self.plotvalues = [random.randint(20,40) for _ in range(self.bandwidth)]            # TODO : This is a test, so the values are random
        self.plot_widget.plot(self.time, self.plotvalues)

        # Add widgets to middle layout
        middle_layout.addWidget(self.plot_widget)
        middle_layout.addWidget(resistor_button_widget)

        ### Bottom Layout ###
        frequency_label_widget = QWidget()
        frequency_label_layout = QVBoxLayout()

        # Labels (Current Frequency, Select Frequency and Resistor value)
        self.current_frequency_text = QtWidgets.QLabel(MainWindow)
        self.current_frequency_text.setText("Current Frequency : " + str(self.current_frequency) + " Hz")
        self.select_frequency_text = QtWidgets.QLabel(MainWindow)
        self.select_frequency_text.setText("Select Frequency : " + str(self.select_frequency) + " Hz")
        self.resistor_text = QtWidgets.QLabel(MainWindow)
        self.resistor_text.setText("Resistor Values : " + str(self.resistance_value) + " Ohms")
        param_font = QFont()            # Setting the font size
        param_font.setPointSize(20)
        self.current_frequency_text.setFont(param_font)
        self.select_frequency_text.setFont(param_font)
        self.resistor_text.setFont(param_font)
        frequency_label_layout.addWidget(self.current_frequency_text)
        frequency_label_layout.addWidget(self.select_frequency_text)
        frequency_label_layout.addWidget(self.resistor_text)
        frequency_label_widget.setLayout(frequency_label_layout)            # Set vertical layout

        # Buttons (Increase, decrease and confirm buttons)
        frequency_button_widget = QWidget()
        frequency_button_layout = QVBoxLayout()
        
        self.increase_button = QPushButton("+ 10 Hz")
        self.decrease_button = QPushButton("- 10 Hz")
        self.confirm_button = QPushButton("CONFIRM")
        button_font = QFont()            # Setting the font size
        button_font.setPointSize(15)
        self.increase_button.setFont(button_font)
        self.decrease_button.setFont(button_font)
        self.confirm_button.setFont(button_font)
        frequency_button_layout.addWidget(self.increase_button)
        frequency_button_layout.addWidget(self.decrease_button)
        frequency_button_layout.addWidget(self.confirm_button)
        frequency_button_widget.setLayout(frequency_button_layout)

        # Add widgets to middle layout
        bottom_layout.addWidget(frequency_label_widget)
        bottom_layout.addWidget(frequency_button_widget)

        ### Add all the layouts on the main layout ###
        main_layout.addLayout(top_layout)
        main_layout.addLayout(middle_layout)
        main_layout.addLayout(bottom_layout)

        # Set main layout
        central_widget = QWidget()
        central_widget.setLayout(main_layout)
        MainWindow.setCentralWidget(central_widget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        '''
        Updates the GUI
        '''
        # Start the Timer to update it
        self.timer = QtCore.QTimer()
        self.timer.setInterval(round((1/self.current_frequency)*1000))
        self.timer.timeout.connect(self.update_plot)     
        self.timer.start()   

        # Function checks that that the buttons are clicked and act accordingly
        self.increase_button.clicked.connect(self.increase_button_clicked)
        self.decrease_button.clicked.connect(self.decrease_button_clicked)
        self.confirm_button.clicked.connect(self.confirm_button_clicked)

        # Check the resistance value
        self.calculate_resistance()

        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

    def update_plot(self): 
        """
        Updates the Plot
        """
        self.time = self.time[1:]
        self.time.append(self.time[-1] + 1)         # Add a second to that
        self.plotvalues = self.plotvalues[1:]
        self.plotvalues.append(random.randint(20,40))                       # TODO : This is just a test, so the text values are random
        self.plot_widget.line.setData(self.time, self.plotvalues)

    def increase_button_clicked(self) : 
        """
        Updates the select Frequency when "increase Button" is pressed
        """
        self.select_frequency += 10
        self.select_frequency_text.setText("Select Frequency : " + str(self.select_frequency) + " Hz")
        self.select_frequency_text.adjustSize()

    def decrease_button_clicked(self) : 
        """
        Updates the select Frequency when "decrease Button" is pressed
        """
        self.select_frequency -= 10
        self.select_frequency_text.setText("Select Frequency : " + str(self.select_frequency) + " Hz")
        self.select_frequency_text.adjustSize()

    def confirm_button_clicked(self) : 
        """
        Have a popup window when "Confirm Button" is pressed
        """
        confirm_msg = QMessageBox()
        confirm_msg.setWindowTitle("Changing Frequency? ")
        confirm_msg.setText("Confirm Selected Frequency? ")
        confirm_msg.setInformativeText("New Frequency will be " + str(self.select_frequency) + " Hz. ")
        confirm_msg.move(800,400)
        confirm_msg.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        confirm_msg.setMinimumSize(1000, 1000)
        confirm_msg.setIcon(QMessageBox.Question)
        confirm_msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        confirm_msg.setDefaultButton(QMessageBox.No)
        confirm_msg.buttonClicked.connect(self.confirm_pop_up_clicked)

        x = confirm_msg.exec_()

    def confirm_pop_up_clicked(self, i):
        '''
        Dictates what happens when the "Confirm pop-up" buttons are clicked
        '''
        if (i.text() == "&Yes") : 
            if (self.select_frequency > self.max_frequency) : 
                self.frequency_too_high_pop_up()
            elif (self.select_frequency < self.minimum_frequency) :
                self.frequency_too_low_pop_up()
            else : 
                self.current_frequency = self.select_frequency
                self.current_frequency_text.setText("Current Frequency : " + str(self.current_frequency) + " Hz") 

    def frequency_too_high_pop_up(self): 
        '''
        Creates the warning pop-up when frequency is too high
        '''
        warning_msg = QMessageBox()
        warning_msg.setWindowTitle("WARNING ")
        warning_msg.setText("Selected Frequency is too High ")
        warning_msg.setInformativeText("Please set frequency lower than " + str(self.max_frequency) + " Hz")
        warning_msg.move(800,400)
        warning_msg.setIcon(QMessageBox.Critical)
        warning_msg.setStandardButtons(QMessageBox.Retry)

        x = warning_msg.exec_()

    def frequency_too_low_pop_up(self): 
        '''
        Creates the warning pop-up when frequency is too low
        '''
        warning_msg = QMessageBox()
        warning_msg.setWindowTitle("WARNING ")
        warning_msg.setText("Selected Frequency is too Low ")
        warning_msg.setInformativeText("Please set frequency higher than " + str(self.minimum_frequency) + " Hz")
        warning_msg.move(800,400)
        warning_msg.setIcon(QMessageBox.Critical)
        warning_msg.setStandardButtons(QMessageBox.Retry)

        x = warning_msg.exec_()

    def calculate_resistance(self) :
        """
        Calculate the overall resistance of all the parallel activated resistors
        """
        self.resistance_value = 0
        temp = 0
        if self.r1_activate == 1 : 
            temp += 1/(self.r1_value)
            #self.r1_text.setText("R1 (" + str(self.r1_value) + " Ohm) : " + self.resistor_on)  
            self.r1_status_button.setText(self.resistor_on)
            self.r1_status_button.setStyleSheet("background-color: green")
        else : 
            #self.r1_text.setText("R1 (" + str(self.r1_value) + " Ohm) : " + self.resistor_off)  
            self.r1_status_button.setText(self.resistor_off)
            self.r1_status_button.setStyleSheet("background-color: red")
            self.r1_text.adjustSize()

        if self.r2_activate == 1 : 
            temp += 1/(self.r2_value)
            #self.r2_text.setText("R2 (" + str(self.r2_value) + " Ohm) : "+ self.resistor_on)  
            self.r2_status_button.setText(self.resistor_on)
            self.r2_status_button.setStyleSheet("background-color: green")
        else : 
            #self.r2_text.setText("R2 (" + str(self.r2_value) + " Ohm) : " + self.resistor_off) 
            self.r2_status_button.setText(self.resistor_off)
            self.r2_status_button.setStyleSheet("background-color: red")
            self.r2_text.adjustSize()

        if self.r3_activate == 1 : 
            temp += 1/(self.r3_value)
            #self.r3_text.setText("R3 (" + str(self.r3_value) + " Ohm) : " + self.resistor_on)
            self.r3_status_button.setText(self.resistor_on)
            self.r3_status_button.setStyleSheet("background-color: green")
        else : 
            #self.r3_text.setText("R3 (" + str(self.r3_value) + " Ohm) : " + self.resistor_off)  
            self.r3_status_button.setText(self.resistor_off)
            self.r3_status_button.setStyleSheet("background-color: red")
            self.r3_text.adjustSize()

        if self.r4_activate == 1 : 
            temp += 1/(self.r4_value)
            #self.r4_text.setText("R4 (" + str(self.r4_value) + " Ohm) : " + self.resistor_on) 
            self.r4_status_button.setText(self.resistor_on)
            self.r4_status_button.setStyleSheet("background-color: green") 
        else : 
            #self.r4_text.setText("R4 (" + str(self.r4_value) + " Ohm) : " + self.resistor_off)  
            self.r4_status_button.setText(self.resistor_off)
            self.r4_status_button.setStyleSheet("background-color: red")
            self.r4_text.adjustSize()

        if self.r5_activate == 1 : 
            temp += 1/(self.r5_value)
            #self.r5_text.setText("R5 (" + str(self.r5_value) + " Ohm) : " + self.resistor_on)
            self.r5_status_button.setText(self.resistor_on)
            self.r5_status_button.setStyleSheet("background-color: green") 
        else : 
            # self.r5_text.setText("R5 (" + str(self.r5_value) + " Ohm) : " + self.resistor_off)  
            self.r5_status_button.setText(self.resistor_off)
            self.r5_status_button.setStyleSheet("background-color: red")
            self.r5_text.adjustSize()

        if self.r6_activate == 1 : 
            temp += 1/(self.r6_value)
            # self.r6_text.setText("R6 (" + str(self.r6_value) + " Ohm) : " + self.resistor_on)
            self.r6_status_button.setText(self.resistor_on)
            self.r6_status_button.setStyleSheet("background-color: green") 
        else : 
            #self.r6_text.setText("R6 (" + str(self.r6_value) + " Ohm) : " + self.resistor_off)  
            self.r6_status_button.setText(self.resistor_off)
            self.r6_status_button.setStyleSheet("background-color: red")
            self.r6_text.adjustSize()

        if self.r7_activate == 1 : 
            temp += 1/(self.r7_value)
            # self.r7_text.setText("R7 (" + str(self.r7_value) + " Ohm) : " + self.resistor_on)
            self.r7_status_button.setText(self.resistor_on)
            self.r7_status_button.setStyleSheet("background-color: green") 

        else : 
            # self.r7_text.setText("R1 (" + str(self.r7_value) + " Ohm) : " + self.resistor_off) 
            self.r7_status_button.setText(self.resistor_off)
            self.r7_status_button.setStyleSheet("background-color: red")
            self.r7_text.adjustSize() 

        if self.r8_activate == 1 : 
            temp += 1/(self.r8_value)
            # self.r8_text.setText("R8 (" + str(self.r8_value) + " Ohm) : " + self.resistor_on)  
            self.r8_status_button.setText(self.resistor_on)
            self.r8_status_button.setStyleSheet("background-color: green") 

        else : 
            # self.r8_text.setText("R8 (" + str(self.r8_value) + " Ohm) : " + self.resistor_off) 
            self.r8_status_button.setText(self.resistor_off)
            self.r8_status_button.setStyleSheet("background-color: red")
            self.r8_text.adjustSize()

        self.resistance_value = 1/temp
        self.resistor_text.setText("Resistor Values : " + str(round(self.resistance_value,2)) + " Ohms")



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    MainWindow.setGeometry(0,0,800,480)         # The window starts on the top, left corner (with 800 px wide and 480 px height)
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
